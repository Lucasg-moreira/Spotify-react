{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\teste\\\\explorando-reat\\\\client\\\\src\\\\components\\\\Dashboard\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport useAuth from \"../../useAuth\";\nimport { useState, useEffect } from \"react\";\nimport { Container, Form } from \"react-bootstrap\";\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport { TrackSearchResult } from \"../TrackSearchResult\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"1f0603885b3247c39be58a184a3791b9\"\n});\nexport const Dashboard = _ref => {\n  _s();\n\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"xxx\");\n  const [searchResults, setSearchResults] = useState([]);\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    spotifyApi.searchTracks(search).then(res => {\n      if (cancel) return;\n      setSearchResults(res.body.tracks.items.map(track => {\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        };\n      }));\n    });\n    console.log(searchResults);\n    return () => cancel = true;\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"d-flex flex-column py-2\",\n    style: {\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n      type: \"search\",\n      placeholder: \"Search songs/artists\",\n      value: search,\n      onChange: e => setSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow-1 my-2\",\n      style: {\n        overflowY: \"auto\"\n      },\n      children: searchResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResult, {\n        track: track\n      }, track.uri, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Bottom\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Dashboard, \"NZb+CyD3wwbsM8emF2LxSFMDUK0=\", false, function () {\n  return [useAuth];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/pc/Desktop/teste/explorando-reat/client/src/components/Dashboard/index.js"],"names":["useAuth","useState","useEffect","Container","Form","SpotifyWebApi","TrackSearchResult","spotifyApi","clientId","Dashboard","code","accessToken","search","setSearch","searchResults","setSearchResults","setAccessToken","cancel","searchTracks","then","res","body","tracks","items","map","track","smallestAlbumImage","album","images","reduce","smallest","image","height","artist","artists","name","title","uri","albumUrl","url","console","log","e","target","value","overflowY"],"mappings":"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","sourcesContent":["import useAuth from \"../../useAuth\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Container, Form } from \"react-bootstrap\"\r\nimport SpotifyWebApi from 'spotify-web-api-node'\r\nimport { TrackSearchResult } from \"../TrackSearchResult\";\r\n\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n    clientId: \"1f0603885b3247c39be58a184a3791b9\"\r\n})\r\n\r\nexport const Dashboard = ({ code }) => {\r\n    const accessToken = useAuth(code);\r\n    const [search, setSearch] = useState(\"xxx\")\r\n    const [searchResults, setSearchResults] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        if (!accessToken) return\r\n        spotifyApi.setAccessToken(accessToken)\r\n    }, [accessToken])\r\n\r\n\r\n    useEffect(() => {\r\n        if (!search) return setSearchResults([])\r\n        if (!accessToken) return\r\n\r\n        let cancel = false\r\n        spotifyApi.searchTracks(search).then(res => {\r\n            if (cancel) return\r\n\r\n            setSearchResults(\r\n                res.body.tracks.items.map(track => {\r\n                    const smallestAlbumImage = track.album.images.reduce(\r\n                        (smallest, image) => {\r\n                            if (image.height < smallest.height)return image\r\n                            return smallest\r\n                        },\r\n                        track.album.images[0]\r\n                      )\r\n\r\n                      return {\r\n                        artist: track.artists[0].name,\r\n                        title: track.name,\r\n                        uri: track.uri,\r\n                        albumUrl: smallestAlbumImage.url,\r\n                      }\r\n                    })\r\n                  )\r\n                })\r\n                console.log(searchResults)\r\n                return () => (cancel = true)\r\n              }, [search, accessToken])\r\n    \r\nreturn (\r\n    <Container className=\"d-flex flex-column py-2\" style={{\r\n        height: \"100vh\"\r\n    }}>\r\n        <h1>Dashboard</h1>\r\n        <Form.Control\r\n            type=\"search\"\r\n            placeholder=\"Search songs/artists\"\r\n            value={search}\r\n            onChange={e => setSearch(e.target.value)} />\r\n        <div\r\n            className=\"flex-grow-1 my-2\" style={{ overflowY: \"auto\" }}>\r\n            {searchResults.map((track) => (\r\n                <TrackSearchResult track={track} key={track.uri} />\r\n            ))}\r\n        </div>\r\n        <div>Bottom</div>\r\n    </Container>\r\n)\r\n\r\n}"]},"metadata":{},"sourceType":"module"}