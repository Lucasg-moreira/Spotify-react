{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc\\\\Desktop\\\\teste\\\\explorando-reat\\\\client\\\\src\\\\components\\\\Dashboard\\\\index.js\",\n    _s = $RefreshSig$();\n\nimport useAuth from \"../../useAuth\";\nimport { useState, useEffect } from \"react\";\nimport { Container, Form } from \"react-bootstrap\";\nimport SpotifyWebApi from 'spotify-web-api-node';\nimport TrackSearchResult from \"../TrackSearchResult\";\nimport Controls from \"../Controls\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst spotifyApi = new SpotifyWebApi({\n  clientId: \"1f0603885b3247c39be58a184a3791b9\"\n});\nexport const Dashboard = _ref => {\n  _s();\n\n  let {\n    code\n  } = _ref;\n  const accessToken = useAuth(code);\n  const [search, setSearch] = useState(\"\");\n  const [searchResults, setSearchResults] = useState([]);\n  const [playingTrack, setPlayingTrack] = useState();\n  const [lyrics, setLyrics] = useState(\"\");\n  console.log(lyrics);\n\n  const chooseTrack = track => {\n    setPlayingTrack(track);\n    setSearch(\"\");\n    setLyrics(\"\");\n  };\n\n  useEffect(() => {\n    if (!playingTrack) return;\n    axios.get(\"http://localhost:3001/lyrics\", {\n      params: {\n        track: playingTrack.title,\n        artist: playingTrack.artist\n      }\n    }).then(res => {\n      setLyrics(res.data.lyrics);\n    });\n  }, [playingTrack]);\n  useEffect(() => {\n    if (!accessToken) return;\n    spotifyApi.setAccessToken(accessToken);\n  }, [accessToken]);\n  useEffect(() => {\n    if (!search) return setSearchResults([]);\n    if (!accessToken) return;\n    let cancel = false;\n    spotifyApi.searchTracks(search).then(res => {\n      if (cancel) return;\n      setSearchResults(res.body.tracks.items.map(track => {\n        const smallestAlbumImage = track.album.images.reduce((smallest, image) => {\n          if (image.height < smallest.height) return image;\n          return smallest;\n        }, track.album.images[0]);\n        return {\n          artist: track.artists[0].name,\n          title: track.name,\n          uri: track.uri,\n          albumUrl: smallestAlbumImage.url\n        };\n      }));\n    });\n    return () => cancel = true;\n  }, [search, accessToken]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"d-flex flex-column py-2\",\n    style: {\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(Form.Control, {\n      type: \"search\",\n      placeholder: \"Search songs/artists\",\n      value: search,\n      onChange: e => setSearch(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex-grow-1 my-2\",\n      style: {\n        overflowY: \"auto\"\n      },\n      children: [searchResults.map(track => /*#__PURE__*/_jsxDEV(TrackSearchResult, {\n        track: track,\n        chooseTrack: chooseTrack\n      }, track.uri, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 21\n      }, this)), searchResults === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-center\",\n        style: {\n          whiteSpace: \"pre\"\n        },\n        children: lyrics\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Controls, {\n      accessToken: accessToken,\n      trackUri: playingTrack === null || playingTrack === void 0 ? void 0 : playingTrack.uri\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Dashboard, \"C/xkEiesDpJOEbcaLNXZ/RIs9iE=\", false, function () {\n  return [useAuth];\n});\n\n_c = Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"sources":["C:/Users/pc/Desktop/teste/explorando-reat/client/src/components/Dashboard/index.js"],"names":["useAuth","useState","useEffect","Container","Form","SpotifyWebApi","TrackSearchResult","Controls","axios","spotifyApi","clientId","Dashboard","code","accessToken","search","setSearch","searchResults","setSearchResults","playingTrack","setPlayingTrack","lyrics","setLyrics","console","log","chooseTrack","track","get","params","title","artist","then","res","data","setAccessToken","cancel","searchTracks","body","tracks","items","map","smallestAlbumImage","album","images","reduce","smallest","image","height","artists","name","uri","albumUrl","url","e","target","value","overflowY","whiteSpace"],"mappings":"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","sourcesContent":["import useAuth from \"../../useAuth\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Container, Form } from \"react-bootstrap\"\r\nimport SpotifyWebApi from 'spotify-web-api-node'\r\nimport TrackSearchResult from \"../TrackSearchResult\";\r\nimport Controls from \"../Controls\";\r\nimport axios from \"axios\";\r\n\r\nconst spotifyApi = new SpotifyWebApi({\r\n    clientId: \"1f0603885b3247c39be58a184a3791b9\"\r\n})\r\n\r\nexport const Dashboard = ({ code }) => {\r\n    const accessToken = useAuth(code);\r\n    const [search, setSearch] = useState(\"\")\r\n    const [searchResults, setSearchResults] = useState([])\r\n    const [playingTrack, setPlayingTrack] = useState()\r\n    const[lyrics, setLyrics] = useState(\"\")\r\n    console.log(lyrics)\r\n    const chooseTrack = (track) => {\r\n        setPlayingTrack(track)\r\n        setSearch(\"\")\r\n        setLyrics(\"\")\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!playingTrack) return\r\n\r\n        axios\r\n        .get(\"http://localhost:3001/lyrics\", {\r\n            params: {\r\n                track: playingTrack.title,\r\n                artist: playingTrack.artist,\r\n            },\r\n        })\r\n        .then(res => {\r\n            setLyrics(res.data.lyrics)\r\n        })\r\n    }, [playingTrack])\r\n\r\n    useEffect(() => {\r\n        if (!accessToken) return\r\n        spotifyApi.setAccessToken(accessToken)\r\n    }, [accessToken])\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (!search) return setSearchResults([])\r\n        if (!accessToken) return\r\n\r\n        let cancel = false\r\n        spotifyApi.searchTracks(search).then(res => {\r\n            if (cancel) return\r\n            setSearchResults(\r\n                res.body.tracks.items.map(track => {\r\n                    const smallestAlbumImage = track.album.images.reduce(\r\n                        (smallest, image) => {\r\n                            if (image.height < smallest.height) return image\r\n                            return smallest\r\n                        },\r\n                        track.album.images[0]\r\n                    )\r\n\r\n                    return {\r\n                        artist: track.artists[0].name,\r\n                        title: track.name,\r\n                        uri: track.uri,\r\n                        albumUrl: smallestAlbumImage.url,\r\n                    }\r\n                })\r\n            )\r\n        })\r\n        return () => (cancel = true)\r\n    }, [search, accessToken])\r\n\r\n    return (\r\n        <Container className=\"d-flex flex-column py-2\" style={{\r\n            height: \"100vh\"\r\n        }}>\r\n            <Form.Control\r\n                type=\"search\"\r\n                placeholder=\"Search songs/artists\"\r\n                value={search}\r\n                onChange={e => setSearch(e.target.value)} />\r\n            <div\r\n                className=\"flex-grow-1 my-2\" style={{ overflowY: \"auto\" }}>\r\n                {searchResults.map(track => (\r\n                    <TrackSearchResult\r\n                        track={track}\r\n                        key={track.uri}\r\n                        chooseTrack={chooseTrack} />\r\n                ))}\r\n                {searchResults === 0 && (\r\n                    <div className=\"text-center\" style={{ whiteSpace: \"pre\" }}>  \r\n                        {lyrics}\r\n                    </div>\r\n\r\n                )}\r\n            </div>\r\n\r\n          \r\n                <Controls accessToken={accessToken} trackUri={playingTrack?.uri} />\r\n            \r\n        </Container>\r\n    )\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}